{"pageProps":{"params":{"id":["JS","기본"]},"data":"<h1>FRONT-END 의 기본</h1>\n<ol>\n<li>수정 및 변경이 용이한 코드</li>\n<li>네이밍, 컨벤션의 정리</li>\n<li>부가적인 효과 ( side effect ) 최소화</li>\n</ol>\n<h2>JS 어떤 걸 기본으로 공부해야하나</h2>\n<h3>이해</h3>\n<ul>\n<li>\n<p>함수, 객체</p>\n</li>\n<li>\n<p>비동기의 개념</p>\n<ul>\n<li>콜백, 프로미스, async/await</li>\n<li>event</li>\n</ul>\n</li>\n<li>\n<p>호출 스택, 이벤트 루프, 실행 컨텍스트</p>\n</li>\n</ul>\n<h2>코드</h2>\n<ul>\n<li>\n<p>명령형</p>\n<ul>\n<li>for 문이나 while 문 등을 이용하여 <strong>어떻게</strong> 처리를 해야하는지에 대한 방법</li>\n<li>ex) 반복문을 사용하여 두배의 결과값을 results 안에 넣어라</li>\n</ul>\n<pre><code class=\"language-js\">function double (arr) {\n    let results = [];\n    for (let i = 0; i &lt; arr.length; i++){\n        results.push(arr[i] * 2)\n    } \n    return results\n}\n</code></pre>\n</li>\n<li>\n<p>선언형</p>\n<ul>\n<li><strong>무엇을</strong> 처리하는지에 대한 방법</li>\n<li>기본적으로 함수, 명령어에 대한 이해가 있으면 기대한 값이 어떤식으로 나올 지 추상화가 되어있음</li>\n<li>메서드 안쪽으로 추상화 되어있는 부분은 직접 상태 변경을 하지 않고</li>\n<li>높은 가독성을 가짐</li>\n<li>ex) arr 의 요소의 두배의 결과값을 가진 배열을 리턴해라</li>\n</ul>\n<pre><code class=\"language-js\">function double (arr) {\n    return arr.map(num =&gt; num * 2)\n}\n</code></pre>\n<ul>\n<li>\n<p>선언형 메소드</p>\n<blockquote>\n<p>const arr = [1,5,9,10,12]</p>\n</blockquote>\n<ul>\n<li>\n<p>forEach</p>\n<pre><code class=\"language-js\">function print (arr) {\n    arr.forEach(num =&gt; console.log(num))\n}\n\nprint(arr)\n\n// 1\n// 5\n// 9\n// 10\n// 12\n</code></pre>\n</li>\n<li>\n<p>map</p>\n<pre><code class=\"language-js\">function double (arr) {\n    return arr.map(num =&gt; num * 2)\n}\n\ndouble(arr) // [2,10,18,20,24]\n</code></pre>\n</li>\n<li>\n<p>filter</p>\n<pre><code class=\"language-js\">function odd (arr) {\n    return arr.filter(num =&gt; num % 2)\n}\nodd(arr) // [1,5,9]\n</code></pre>\n</li>\n<li>\n<p>reduce</p>\n<pre><code class=\"language-js\">function total (arr) {\n    return arr.reduce((prev,curr) =&gt; prev+ curr, 0)\n}\ntotal(arr) // 37\n</code></pre>\n</li>\n<li>\n<p>some</p>\n<pre><code class=\"language-js\">function isBiggerThanFive(arr) {\n    return arr.some(num =&gt; num &gt; 5)\n}\n\n// 하나의 결과만 True 로 나오게 되도 반복문을 중단한다.\n// [1,5,9,10,12] 일 경우 9에서 true 결과로 나오기 때문에 10, 12는 체크를 안하게된다\nisBiggerThanFive(arr) // true\n</code></pre>\n</li>\n<li>\n<p>every</p>\n<pre><code class=\"language-js\">function isPositive(arr) {\n    return arr.every(num =&gt; num &gt; 0)\n}\n\n// 하나의 결과만 False 로 나오게 되도 반복문을 중단한다.\n// [1,5,9,10,12] 일 경우 전부 조건문을 통과하기 때문에 true로 나오게 되고\n// 만약 중간에 음수가 있게 되면 false가 return 된다\nisPositive(arr) // true\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},"__N_SSG":true}