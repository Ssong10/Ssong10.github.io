{"pageProps":{"params":{"id":["HTML","Reflow & Repaint"]},"data":"<h1 id=\"Reflow, Repaint\"><a class=\"header-anchor\" href=\"#Reflow, Repaint\">#</a>Reflow, Repaint</h1>\n<blockquote>\n<p>웹 페이지가 렌더링되어 attachment 되었으면 성공적으로 페이지를 그리게 됩니다.</p>\n<p>그 후에 액션이나, 이벤트에 따라서 html 요소들이 변경이 되는 과정들과 그에 따른 성능 최적화에 대해서 알아보겠습니다.</p>\n</blockquote>\n<h2 id=\"Reflow ( Layout )\"><a class=\"header-anchor\" href=\"#Reflow ( Layout )\">#</a>Reflow ( Layout )</h2>\n<h3 id=\"어떤 과정으로 발생하는 지\"><a class=\"header-anchor\" href=\"#어떤 과정으로 발생하는 지\">#</a>어떤 과정으로 발생하는 지</h3>\n<ul>\n<li>어떠한 액션이나 이벤트에 따라서 html 요소의 크기나 위치 등 레이아웃 수치를 수정하게 되면 그에 영향을 받는 자식 노드나 부모노드를 포함하여 Layout 과정을 다시 수행하게 됩니다.</li>\n<li>이러한 동작이 일어나면 Render Tree 에 있는 요소들의 크기와 위치를 다시 계산하게 되는데 이 과정을 Reflow 라고 합니다</li>\n</ul>\n<h3 id=\"Reflow 가 일어나는 경우\"><a class=\"header-anchor\" href=\"#Reflow 가 일어나는 경우\">#</a>Reflow 가 일어나는 경우</h3>\n<ul>\n<li>페이지 초기 렌더링 시 ( 최초 Layout 과정 )</li>\n<li>윈도우 resize event 발생시 ( Viewport 크기 변경시 )</li>\n<li>노드의 추가 또는 제거</li>\n<li>요소의 위치, 크기 변경 ( left, top, margin, padding, border, width, height 등… )</li>\n<li>텍스트의 변경과 이미지 소스의 변경 등</li>\n</ul>\n<h2 id=\"Repaint ( Paint )\"><a class=\"header-anchor\" href=\"#Repaint ( Paint )\">#</a>Repaint ( Paint )</h2>\n<blockquote>\n<p>위 과정의 Reflow는 Render Tree까지 영향을 주는 과정이고, 결국 Render Tree 를 화면에 그리는 작업이 일어나게 됩니다.</p>\n<p>이 과정을 Repaint 라고 합니다</p>\n</blockquote>\n<ul>\n<li>\n<p>Reflow 가 일어나면 Repaint는 필연적으로 일어나게 됩니다.</p>\n</li>\n<li>\n<p>하지만 Reflow 가 일어나야지만 Repaint 가 일어나는 것은 아닙니다.</p>\n<ul>\n<li>사이즈나 content 변경이 없으면 Reflow 가 일어나지 않기 때문에</li>\n<li>background-color 나 visibility 와 같은 레이아웃에 영향을 주지 않는 스타일 속성의 변화시에는 Reflow 가 일어나지 않고 Repaint 만 발생하게 됩니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Reflow, Repaint 다양한 경우\"><a class=\"header-anchor\" href=\"#Reflow, Repaint 다양한 경우\">#</a>Reflow, Repaint 다양한 경우</h2>\n<ul>\n<li>Reflow 가 일어나는 대표적인 속성</li>\n</ul>\n<table>\n    <tr><td>position</td><td>width</td><td>height</td><td>left</td><td>top</td></tr>\n    <tr><td>right</td><td>bottom</td><td>margin</td><td>padding</td><td>border</td></tr>\n    <tr><td>border-width</td><td>clear</td><td>display</td><td>float</td><td>font-family</td></tr>\n    <tr><td>font-size</td><td>font-weight</td><td>line-height</td><td>min-height</td><td>overflow</td></tr>\n    <tr><td>text-align</td><td>vertical-align</td><td>white-space</td><td>...</td><td></td></tr>\n</table>\n<ul>\n<li>Repaint 가 일어나는 대표적인 속성</li>\n</ul>\n<table>\n    <tr><td>background</td><td>background-image</td><td>background-position</td><td>background-repeat</td><td>background-size</td></tr>\n    <tr><td>border-radius</td><td>border-style</td><td>box-shadow</td><td>color</td><td>line-style</td></tr>\n    <tr><td>outline</td><td>outline-color</td><td>outline-style</td><td>outline-width</td><td>text=decoration</td></tr>\n    <tr><td>visibility</td><td>...</td><td></td><td></td><td></td></tr>\n</table>\n<ul>\n<li>\n<p>Reflow, Repaint 가 일어나지 않는 속성</p>\n<ul>\n<li>\n<p>transform 이나 opacity 같은 속성은 Reflow, Repaint 가 일어나지 않습니다</p>\n</li>\n<li>\n<p>상황에 따라서 left,right,width, height 보단 transform,</p>\n<p>visibility / display 보다 opacity 를 사용하는것이 성능 개선에 도움이 됩니다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Reflow, Repaint 을 통한 성능 최적화\"><a class=\"header-anchor\" href=\"#Reflow, Repaint 을 통한 성능 최적화\">#</a>Reflow, Repaint 을 통한 성능 최적화</h2>\n<ol>\n<li>visibilty:  hidden 보다 display:none 을 사용합니다\n<ul>\n<li>visibility 는 Render tree 에 계산되기 때문에 하위노드 전체까지 Reflow가 발생하게 되지만 display:none 은 Render tree에서 제외됩니다.</li>\n</ul>\n</li>\n<li>위의 도표를 참조하여 Reflow가 발생하는 속성보다 Repaint 만 발생하는 속성을 사용합니다.</li>\n<li>position : absolute 나 fixed 를 사용하여 영향을 받는 주변 노드들을 줄일 수 있습니다.</li>\n<li>프레임 줄이기\n<ul>\n<li>animation 이나 JS 로 동작하는 변화부분에서 debounce나 throttle 을 사용하여 연산을 줄일수 있고, 동작의 부드러운 효과를 줄이고 성능을 개선할 수 있습니다.</li>\n</ul>\n</li>\n<li>documentFragment\n<ul>\n<li>documentFragment 는 실제 Dom, Render Tree 에 포함되지 않는 노드입니다.</li>\n<li>Render Tree에 반복적인 appendChild를 하게 된다면, 그 반복만큼 Reflow, Repaint 가 발생하게 됩니다.</li>\n<li>documentFragment에 노드를 추가하는 작업은 reflow, repaint 가 발생하지 않습니다</li>\n<li>documentFragment 를 Render Tree에 삽입하게 된다면 Reflow와 Repaint 를 단1회로  할 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n","anchor":"<li><a class=\"anchor-tag h1_tags\" href=\"#Reflow, Repaint\">Reflow, Repaint</a></li><li><a class=\"anchor-tag h2_tags\" href=\"#Reflow ( Layout )\">Reflow ( Layout )</a></li><li><a class=\"anchor-tag h3_tags\" href=\"#어떤 과정으로 발생하는 지\">어떤 과정으로 발생하는 지</a></li><li><a class=\"anchor-tag h3_tags\" href=\"#Reflow 가 일어나는 경우\">Reflow 가 일어나는 경우</a></li><li><a class=\"anchor-tag h2_tags\" href=\"#Repaint ( Paint )\">Repaint ( Paint )</a></li><li><a class=\"anchor-tag h2_tags\" href=\"#Reflow, Repaint 다양한 경우\">Reflow, Repaint 다양한 경우</a></li><li><a class=\"anchor-tag h2_tags\" href=\"#Reflow, Repaint 을 통한 성능 최적화\">Reflow, Repaint 을 통한 성능 최적화</a></li>"},"__N_SSG":true}