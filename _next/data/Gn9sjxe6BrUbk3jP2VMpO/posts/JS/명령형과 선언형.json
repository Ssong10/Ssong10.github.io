{"pageProps":{"params":{"id":["JS","명령형과 선언형"]},"data":"<h2 id=\"명령형과 선언형\"><a class=\"header-anchor\" href=\"#명령형과 선언형\">#</a>명령형과 선언형</h2>\n<ul>\n<li>\n<p>명령형</p>\n<ul>\n<li>for 문이나 while 문 등을 이용하여 <strong>어떻게</strong> 처리를 해야하는지에 대한 방법</li>\n<li>ex) 반복문을 사용하여 두배의 결과값을 results 안에 넣어라</li>\n</ul>\n<pre><code class=\"language-js\">function double (arr) {\n  let results = [];\n  for (let i = 0; i &lt; arr.length; i++){\n    results.push(arr[i] * 2)\n  } \n  return results\n}\n</code></pre>\n</li>\n<li>\n<p>선언형</p>\n<ul>\n<li><strong>무엇을</strong> 처리하는지에 대한 방법</li>\n<li>기본적으로 함수, 명령어에 대한 이해가 있으면 기대한 값이 어떤식으로 나올 지 추상화가 되어있음</li>\n<li>메서드 안쪽으로 추상화 되어있는 부분은 직접 상태 변경을 하지 않고</li>\n<li>높은 가독성을 가짐</li>\n<li>ex) arr 의 요소의 두배의 결과값을 가진 배열을 리턴해라</li>\n</ul>\n<pre><code class=\"language-js\">function doubleNumb (arr) {\n  return arr.map(num =&gt; num * 2)\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"선언형 메소드\"><a class=\"header-anchor\" href=\"#선언형 메소드\">#</a>선언형 메소드</h2>\n<blockquote>\n<p>const arr = [1,5,9,10,12]</p>\n</blockquote>\n<ul>\n<li>\n<p>forEach</p>\n<pre><code class=\"language-js\">function print (arr) {\n    arr.forEach(num =&gt; console.log(num))\n}\n  \nprint(arr)\n// 1\n// 5\n// 9\n// 10\n// 12\n</code></pre>\n</li>\n<li>\n<p>map</p>\n<pre><code class=\"language-js\">function double (arr) {\n  return arr.map(num =&gt; num * 2)\n}\n\ndouble(arr) // [2,10,18,20,24]\n</code></pre>\n</li>\n<li>\n<p>filter</p>\n<pre><code class=\"language-js\">function odd (arr) {\n  return arr.filter(num =&gt; num % 2)\n}\nodd(arr) // [1,5,9]\n</code></pre>\n</li>\n<li>\n<p>reduce</p>\n<pre><code class=\"language-js\">function total (arr) {\n  return arr.reduce((prev,curr) =&gt; prev+ curr, 0)\n}\ntotal(arr) // 37\n</code></pre>\n</li>\n<li>\n<p>some</p>\n<pre><code class=\"language-js\">function isBiggerThanFive(arr) {\n  return arr.some(num =&gt; num &gt; 5)\n}\n\n// 하나의 결과만 True 로 나오게 되도 반복문을 중단한다.\n// [1,5,9,10,12] 일 경우 9에서 true 결과로 나오기 때문에 10, 12는 체크를 안하게된다\nisBiggerThanFive(arr) // true\n</code></pre>\n</li>\n<li>\n<p>every</p>\n<pre><code class=\"language-js\">function isPositive(arr) {\n  return arr.every(num =&gt; num &gt; 0)\n}\n\n// 하나의 결과만 False 로 나오게 되도 반복문을 중단한다.\n// [1,5,9,10,12] 일 경우 전부 조건문을 통과하기 때문에 true로 나오게 되고\n// 만약 중간에 음수가 있게 되면 false가 return 된다\nisPositive(arr) // true\n</code></pre>\n</li>\n</ul>\n","anchor":"<li><a class=\"anchor-tag h2_tags\" href=\"#명령형과 선언형\">명령형과 선언형</a></li><li><a class=\"anchor-tag h2_tags\" href=\"#선언형 메소드\">선언형 메소드</a></li>"},"__N_SSG":true}