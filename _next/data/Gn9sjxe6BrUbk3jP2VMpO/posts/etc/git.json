{"pageProps":{"params":{"id":["etc","git"]},"data":"<h1 id=\"Git\"><a class=\"header-anchor\" href=\"#Git\">#</a>Git</h1>\n<p><code>Git</code>은 <code>분산형 버전관리시스템(DVCS)</code> 이다.</p>\n<ul>\n<li>Window에서 <code>Git</code>을 사용하기 위해서는 <code>Git bash</code> 를 반드시 설치해야 함.</li>\n<li>참고자료\n<ul>\n<li><a href=\"https://git-scm.com/book/ko/v2\">Git Scm</a></li>\n<li><a href=\"https://backlog.com/git-tutorial/kr/intro/intro1_1.html\">누구나 쉽게 이해할 수 있는 Git 입문</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Git 기본 명령어(로컬)\"><a class=\"header-anchor\" href=\"#Git 기본 명령어(로컬)\">#</a>Git 기본 명령어(로컬)</h2>\n<ul>\n<li>\n<p>로컬에서 처음 Git을 활용하는 경우 아래의 설정을 해줘야 한다.</p>\n<pre><code class=\"language-bash\">$ git config --global user.name '&lt;Github username&gt;'\n$ git config --global user.email '&lt;Github email&gt;'\n</code></pre>\n<p>커밋하는 사람(<code>author</code>)이 누구인지 설정! Github email이랑 다르면, Github에서 다른 사람이 커밋한 것으로 인식됨!</p>\n<p><em>컴퓨터에서 한번만 설정해주면 된다.</em></p>\n</li>\n</ul>\n<ol>\n<li>\n<p>Git 저장소 설정</p>\n<pre><code class=\"language-bash\">$ git init\nInitialized empty Git repository in C:/Users/student/Desktop/새 폴더/.git/\n\nstudent@DESKTOP MINGW64 ~/Desktop/새 폴더 (master)\n</code></pre>\n<ul>\n<li><code>git init</code> 명령어를 입력하면, 해당 디렉토리에 <code>.git/</code> 폴더가 생성된다.</li>\n<li>모든 git과 관련된 내용은 해당 폴더에 담겨있다.</li>\n<li>저장소로 설정되었다면, <code>git bash</code>에서 <code>(master)</code> 가 나타난다.</li>\n</ul>\n</li>\n<li>\n<p>Staging area(커밋 대상 목록)에 담기</p>\n<pre><code class=\"language-bash\">$ git add .\n$ git add a.txt\n$ git add startcamp/\n</code></pre>\n<ul>\n<li>\n<p><code>git add</code> 명령어를 통해 특정 파일 혹은 폴더를 <code>commit</code> 할 목록(<code>staging area</code>, <code>INDEX</code>)에 담아 놓는다.</p>\n</li>\n<li>\n<p>반드시 <code>git status</code> 명령어를 통해 내가 원하는 파일이 반영되었는지 확인한다.</p>\n<pre><code class=\"language-bash\">$ git status\n...\nChanges to be committed:\n  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)\n\n        new file:   a.txt\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>이력 남기기(<code>commit</code>)</p>\n<pre><code class=\"language-bash\">$ git commit -m '커밋메시지'\n[master (root-commit) 6e5ea06] a.txt 생성\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 a.txt\n</code></pre>\n<ul>\n<li><code>commit</code> 은 현재 소스코드의 상태를 <strong>스냅샷</strong> 찍는 것과 동일하다.</li>\n<li><code>Staging Area</code>에 담겨 있는 내용을 이력으로 남긴다.</li>\n<li>커밋메시지는 반드시 해당 이력의 내용을 정확하게 표현해야 한다. (보통 오픈소스프로젝트, 회사 내에서 관련된 컨벤션이 존재함.)</li>\n</ul>\n</li>\n<li>\n<p>커밋이력 확인하기</p>\n<pre><code class=\"language-bash\">$ git log\ncommit 6e5ea0626eb3~~~~~~~~~b6c97d412588 (HEAD -&gt; master)\nAuthor: ssong10 &lt;leesy1403@naver.com&gt;\nDate:   Tue Jul 9 10:49:00 2019 +0900\n\n    a.txt 생성\n</code></pre>\n<ul>\n<li><code>git log -n</code> 옵션을 주면, 최근 n개의 커밋을 보여준다.</li>\n<li>커밋 이력을 남긴 이후에 커밋 메시지 변경, 삭제 등을 할 수 있는데 이 경우는 매우 조심해야 한다!</li>\n</ul>\n</li>\n<li>\n<p><strong>git 상태 확인</strong></p>\n<p><strong>항상 모든 명령어를 입력하기 전에 아래의 명령어를 입력하는 습관을 들이자!</strong></p>\n<pre><code class=\"language-bash\">$ git status\n</code></pre>\n</li>\n</ol>\n<h2 id=\"Git 원격 저장소 활용하기\"><a class=\"header-anchor\" href=\"#Git 원격 저장소 활용하기\">#</a>Git 원격 저장소 활용하기</h2>\n<p>원격 저장소(<code>remote repository</code>)는 <code>github</code>, <code>gitlab</code>, <code>bitbucket</code> 등 다양한 서비스를 활용할 수 있다.</p>\n<ol>\n<li>\n<p>원격 저장소(<code>remote repository</code>) 설정</p>\n<pre><code class=\"language-bash\">$ git remote add origin __https://github.com__\n</code></pre>\n<ul>\n<li>로컬 저장소에 최초에 한번만 등록하면 된다.</li>\n<li><code>원격 저장소(remote)</code>를 <code>origin</code> 이라는 이름으로 정해진 <code>url</code>을 <code>등록(add)</code> 하는 것이다.</li>\n</ul>\n</li>\n<li>\n<p>원격 저장소로 <code>push</code></p>\n<pre><code class=\"language-bash\">$ git push origin master\n</code></pre>\n<ul>\n<li><code>origin</code> 으로 설정된 원격 저장소에 <code>push</code> 한다.</li>\n</ul>\n</li>\n<li>\n<p>원격 저장소에서 <code>pull</code></p>\n<pre><code class=\"language-bash\">$ git pull origin master\n</code></pre>\n<ul>\n<li>원격 저장소에 새로운 변경 사항이 있는 경우 <code>pull</code> 을 통해 받아온다.</li>\n</ul>\n</li>\n<li>\n<p><code>clone</code></p>\n<pre><code class=\"language-bash\">$ git clone __url__\n</code></pre>\n<ul>\n<li><code>clone</code> 은 원격 저장소에서 최초에 받아올 때 활용한다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"gitignore\"><a class=\"header-anchor\" href=\"#gitignore\">#</a>gitignore</h2>\n<blockquote>\n<p>git init을 하면 해당 파일을 작성하는 습관을 들이자!</p>\n</blockquote>\n<p><code>.gitignore</code> 파일에 작성된 파일 혹은 폴더 등은 git으로 관리되지 않는다.예시는 다음과 같다.</p>\n<blockquote>\n<p><strong>pycache</strong>/\t# <strong>pycache</strong> 폴더 안에 있는 내용 모두\n*.zip\t\t\t# 확장자가 zip인 파일 모두\nprofile.jpg\t\t# prfile.jpg 파일</p>\n</blockquote>\n<p>처음에는 직접 만들기 보다 <a href=\"https://www.gitignore.io/\">gitignore</a> 에서 내 개발환경에 맞춰 만들어 주는 파일을 적용하자.</p>\n<p>예를 들면, pycharm을 쓰고 있을 때, <code>.idea/</code> 를 올리지 않는다거나, python에서는 <code>__pycache__/</code> 를 올릴 필요는 없다.</p>\n","anchor":"<li><a class=\"anchor-tag h1_tags\" href=\"#Git\">Git</a></li><li><a class=\"anchor-tag h2_tags\" href=\"#Git 기본 명령어(로컬)\">Git 기본 명령어(로컬)</a></li><li><a class=\"anchor-tag h2_tags\" href=\"#Git 원격 저장소 활용하기\">Git 원격 저장소 활용하기</a></li><li><a class=\"anchor-tag h2_tags\" href=\"#gitignore\">gitignore</a></li>"},"__N_SSG":true}